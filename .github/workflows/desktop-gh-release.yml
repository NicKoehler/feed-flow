name: Desktop GitHub Release
on:
  workflow_dispatch:
    { }
  workflow_run:
    workflows: ["Desktop MacOS Testflight Release"]
    types:
      - completed

jobs:
  build-macos:
    # TODO : restore
    #if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: macos-14
    outputs:
      artifact_name: ${{ steps.path_variables.outputs.artifact_name }}
      release_tag: ${{ steps.path_variables.outputs.tag }}
    timeout-minutes: 40
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-gradle
        with:
          gradle-cache-encryption-key: ${{ secrets.GRADLE_CACHE_ENCRYPTION_KEY }}

      # Developer ID Application
      - name: Import signing certificate
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA_MACOS }}
          p12-password: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD_MACOS }}

      - name: Update Licenses file
        run: ./gradlew desktopApp:exportLibraryDefinitions -PaboutLibraries.exportPath=src/main/resources/

      - name: Create path variables
        id: path_variables
        run: |
          tag=$(git describe --tags --abbrev=0 --match "*-desktop")
          version=$(echo "$tag" | sed 's/-desktop$//')
          name="FeedFlow-${version}.dmg"
          path="desktopApp/build/release/main-release/dmg/${name}"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "TAG=$tag" >> $GITHUB_ENV
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "RELEASE_PATH=$path" >> $GITHUB_ENV
          echo "artifact_name=$name" >> $GITHUB_OUTPUT


      - name: Create Properties file
        run: |
          echo "is_release=true" >> desktopApp/src/jvmMain/resources/props.properties
          echo "sentry_dns=$SENTRY_DNS" >> desktopApp/src/jvmMain/resources/props.properties
          echo "version=$VERSION" >> desktopApp/src/jvmMain/resources/props.properties
          echo "dropbox_key=$DROPBOX_API_KEY" >> desktopApp/src/jvmMain/resources/props.properties
        env:
          SENTRY_DNS: ${{ secrets.SENTRY_DNS }}
          VERSION: ${{ env.VERSION }}
          DROPBOX_API_KEY: ${{ secrets.DROPBOX_API_KEY }}

      - name: Create DMG
        run: ./gradlew packageReleaseDmg

      - name: Upload reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            **/build/compose/logs/*  

# TODO: Restore
#      - name: Notarization
#        run: |
#          xcrun notarytool submit $RELEASE_PATH --apple-id $APPLE_ID_NOTARIZATION --password $NOTARIZATION_PWD --team-id $APPSTORE_TEAM_ID --wait
#          xcrun stapler staple $RELEASE_PATH
#        env:
#          APPLE_ID_NOTARIZATION: ${{ secrets.APPLE_ID_NOTARIZATION }}
#          APPSTORE_TEAM_ID: ${{ secrets.APPSTORE_TEAM_ID }}
#          NOTARIZATION_PWD: ${{ secrets.NOTARIZATION_PWD }}
#          RELEASE_PATH: ${{ env.RELEASE_PATH }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.path_variables.outputs.artifact_name }}
          path: ${{ env.RELEASE_PATH }}
          retention-days: 1

  build-windows:
    # TODO: restore
    #if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: windows-latest
    outputs:
      artifact_name: ${{ steps.path_variables.outputs.artifact_name }}
    timeout-minutes: 40
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-gradle
        with:
          gradle-cache-encryption-key: ${{ secrets.GRADLE_CACHE_ENCRYPTION_KEY }}

      - name: Update Licenses file
        run: ./gradlew desktopApp:exportLibraryDefinitions "-PaboutLibraries.exportPath=src/main/resources/"

      - name: Create path variables
        id: path_variables
        shell: pwsh
        run: |
          $tag = $(git describe --tags --abbrev=0 --match "*-desktop")
          $version = $tag -replace '-desktop$', ''
          $name = "FeedFlow-${version}.msi"
          $path = "desktopApp/build/release/main-release/msi/${name}"
          "TAG=$tag" >> $env:GITHUB_ENV
          "VERSION=$version" >> $env:GITHUB_ENV
          "RELEASE_PATH=$path" >> $env:GITHUB_ENV
          echo "artifact_name=$name" >> $env:GITHUB_OUTPUT


      - name: Create Properties file
        shell: pwsh
        run: |
          "is_release=true" >> desktopApp/src/jvmMain/resources/props.properties
          "sentry_dns=$env:SENTRY_DNS" >> desktopApp/src/jvmMain/resources/props.properties
          "version=$env:VERSION" >> desktopApp/src/jvmMain/resources/props.properties
          "dropbox_key=$env:DROPBOX_API_KEY" >> desktopApp/src/jvmMain/resources/props.properties
        env:
          SENTRY_DNS: ${{ secrets.SENTRY_DNS }}
          VERSION: ${{ env.VERSION }}
          DROPBOX_API_KEY: ${{ secrets.DROPBOX_API_KEY }}

      - name: Create MSI
        run: ./gradlew packageReleaseMsi

      - name: Upload asset
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.RELEASE_PATH }}
          name: ${{ steps.path_variables.outputs.artifact_name }}
          retention-days: 1

      - name: Upload reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            **/build/compose/logs/*  


  build-linux:
    # TODO: Restore
    #if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      deb_name: ${{ steps.path_variables.outputs.deb_name }}
      rpm_name: ${{ steps.path_variables.outputs.rpm_name }}
    timeout-minutes: 40
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-gradle
        with:
          gradle-cache-encryption-key: ${{ secrets.GRADLE_CACHE_ENCRYPTION_KEY }}


      - name: Update Licenses file
        run: ./gradlew desktopApp:exportLibraryDefinitions -PaboutLibraries.exportPath=src/main/resources/

      - name: Create path variables
        id: path_variables
        run: |
          tag=$(git describe --tags --abbrev=0 --match "*-desktop")
          version=$(echo "$tag" | sed 's/-desktop$//')
          name_deb="FeedFlow-${version}.deb"
          path_deb="desktopApp/build/release/main-release/deb/${name}"
          name_rpm="FeedFlow-${version}.rpm"
          path_rpm="desktopApp/build/release/main-release/rpm/${name}"
          echo "TAG=$tag" >> $GITHUB_ENV
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "RELEASE_PATH_DEB=$path_deb" >> $GITHUB_ENV
          echo "RELEASE_PATH_RPM=$path_rpm" >> $GITHUB_ENV
          echo "deb_name=$name_deb" >> $GITHUB_OUTPUT
          echo "rpm_name=$name_rpm" >> $GITHUB_OUTPUT

      - name: Create Properties file
        run: |
          echo "is_release=true" >> desktopApp/src/jvmMain/resources/props.properties
          echo "sentry_dns=$SENTRY_DNS" >> desktopApp/src/jvmMain/resources/props.properties
          echo "version=$VERSION" >> desktopApp/src/jvmMain/resources/props.properties
          echo "dropbox_key=$DROPBOX_API_KEY" >> desktopApp/src/jvmMain/resources/props.properties
        env:
          SENTRY_DNS: ${{ secrets.SENTRY_DNS }}
          VERSION: ${{ env.VERSION }}
          DROPBOX_API_KEY: ${{ secrets.DROPBOX_API_KEY }}

      - name: Create RPM & DEB
        run: ./gradlew packageReleaseDeb packageReleaseRpm

      - name: Upload RPM
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.RELEASE_PATH_RPM }}
          name: ${{ steps.path_variables.outputs.rpm_name }}
          retention-days: 1

      - name: Upload DEB
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.RELEASE_PATH_DEB }}
          name: ${{ steps.path_variables.outputs.deb_name }}
          retention-days: 1

      - name: Upload reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            **/build/compose/logs/*  


  release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download DEB artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-linux.outputs.deb_name }}

      - name: Download RPM artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-linux.outputs.rpm_name }}

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-windows.outputs.artifact_name }}

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-macos.outputs.artifact_name }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ needs.build-linux.outputs.deb_name }}
            ${{ needs.build-linux.outputs.rpm_name }}
            ${{ needs.build-windows.outputs.artifact_name }}
            ${{ needs.build-macos.outputs.artifact_name }}
          draft: true
          tag_name: ${{ needs.build-macos.outputs.release_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



#      - name: Upload binaries to release
#        uses: svenstaro/upload-release-action@v2
#        with:
#          repo_token: ${{ secrets.GITHUB_TOKEN }}
#          file: ${{ env.RELEASE_PATH }}
#          tag: ${{ env.TAG }}
#          overwrite: true
#          draft: true
#          body: "Release ${{ env.VERSION }}"
