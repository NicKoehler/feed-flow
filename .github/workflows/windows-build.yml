name: Manual Windows Build
on:
  workflow_dispatch:
    { }

jobs:
  windows-build:
    runs-on: windows-latest
    timeout-minutes: 40

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-gradle
        with:
          gradle-cache-encryption-key: ${{ secrets.GRADLE_CACHE_ENCRYPTION_KEY }}

      - name: Update Licenses file
        run: ./gradlew desktopApp:exportLibraryDefinitions "-PaboutLibraries.exportPath=src/main/resources/"

      - name: Create path variables
        id: path_variables
        shell: pwsh
        run: |
          $tag = $(git describe --tags --abbrev=0 --match "*-desktop")
          $version = $tag -replace '-desktop$', ''
          $name_msi = "FeedFlow-${version}.msi"
          $path_msi = "desktopApp/build/release/main-release/msi/${name_msi}"
          $name_exe = "FeedFlow-${version}.exe"
          $path_exe = "desktopApp/build/release/main-release/exe/${name_exe}"
          $name_msix = "FeedFlow-${version}.msix"
          $path_msix = "desktopApp/build/release/main-release/msi/${name_msix}"
          "TAG=$tag" >> $env:GITHUB_ENV
          "VERSION=$version" >> $env:GITHUB_ENV
          "RELEASE_PATH_MSI=$path_msi" >> $env:GITHUB_ENV
          "NAME_MSI=$name_msi" >> $env:GITHUB_ENV
          "RELEASE_PATH_EXE=$path_exe" >> $env:GITHUB_ENV
          "NAME_EXE=$name_exe" >> $env:GITHUB_ENV
          "RELEASE_PATH_MSIX=$path_msix" >> $env:GITHUB_ENV
          "NAME_MSIX=$name_msix" >> $env:GITHUB_ENV

      - name: Create Properties file
        shell: pwsh
        run: |
          "is_release=true" >> desktopApp/src/jvmMain/resources/props.properties
          "sentry_dns=$env:SENTRY_DNS" >> desktopApp/src/jvmMain/resources/props.properties
          "version=$env:VERSION" >> desktopApp/src/jvmMain/resources/props.properties
          "dropbox_key=$env:DROPBOX_API_KEY" >> desktopApp/src/jvmMain/resources/props.properties
        env:
          SENTRY_DNS: ${{ secrets.SENTRY_DNS }}
          VERSION: ${{ env.VERSION }}
          DROPBOX_API_KEY: ${{ secrets.DROPBOX_API_KEY }}

      - name: Create MSI
        run: ./gradlew packageReleaseMsi packageReleaseExe

      - name: Install MSIX Packaging Tool and Dependencies
        shell: pwsh
        run: |
          # Create directory for MSIX output
          New-Item -ItemType Directory -Force -Path "desktopApp/build/release/main-release/msix"
          
          # Download and install FOD (Feature on Demand) package for Windows 11
          Write-Host "Downloading MSIX Packaging Tool Driver FOD..."
          $fodUrl = "https://download.microsoft.com/download/6/c/7/6c7d654b-580b-40d4-8502-f8d435ca125a/Msix-PackagingTool-Driver-Package%7E31bf3856ad364e35%7Eamd64%7E%7E1.cab"
          $fodPath = "MSIXPackagingToolDriver.cab"
          Invoke-WebRequest -Uri $fodUrl -OutFile $fodPath
          
          Write-Host "Installing MSIX Packaging Tool Driver FOD..."
          $dismPath = "$env:SystemRoot\System32\dism.exe"
          & $dismPath /Online /Add-Package /PackagePath:$fodPath
          
          # Download MSIX Packaging Tool
          Write-Host "Downloading MSIX Packaging Tool..."
          $msixToolUrl = "https://download.microsoft.com/download/e/2/e/e2e923b2-7a3a-4730-969d-ab37001fbb5e/MSIXPackagingtoolv1.2024.405.0.msixbundle"
          $msixToolPath = "MSIXPackagingTool.msixbundle"
          Invoke-WebRequest -Uri $msixToolUrl -OutFile $msixToolPath
          
          Write-Host "Installing MSIX Packaging Tool..."
          & $dismPath /Online /Add-ProvisionedAppxPackage /PackagePath:$msixToolPath /SkipLicense
          
          Write-Host "Waiting for installation to complete..."
          Start-Sleep -Seconds 10

      - name: Prepare MSIX conversion template
        shell: pwsh
        run: |
          Write-Host "Reading template file..."
          Write-Host "Template file path: $((Resolve-Path '.github/msix-conversion-template.xml').Path)"
          
          # Convert paths to absolute Windows paths
          $workspaceRoot = $pwd.Path
          Write-Host "`nConverting paths to absolute Windows paths:"
          Write-Host "Workspace root: $workspaceRoot"
          
          $absoluteMsiPath = Join-Path $workspaceRoot $env:RELEASE_PATH_MSI
          $absoluteMsixPath = Join-Path $workspaceRoot $env:RELEASE_PATH_MSIX
          
          # Ensure paths use Windows format
          $absoluteMsiPath = $absoluteMsiPath.Replace('/', '\')
          $absoluteMsixPath = $absoluteMsixPath.Replace('/', '\')
          
          Write-Host "Absolute MSI path: $absoluteMsiPath"
          Write-Host "Absolute MSIX path: $absoluteMsixPath"
          
          # Print raw file content with line numbers
          Write-Host "`nTemplate file content (with line numbers):"
          Write-Host "======================================"
          $lineNumber = 1
          Get-Content -Path ".github/msix-conversion-template.xml" | ForEach-Object { 
              Write-Host ("{0,4}: {1}" -f $lineNumber, $_)
              $lineNumber++
          }
          Write-Host "======================================"
          
          # Print file details
          $fileInfo = Get-Item ".github/msix-conversion-template.xml"
          Write-Host "`nFile details:"
          Write-Host "- Last Write Time: $($fileInfo.LastWriteTime)"
          Write-Host "- File Size: $($fileInfo.Length) bytes"
          Write-Host "- Attributes: $($fileInfo.Attributes)"
          
          # Read and store content
          $templateContent = Get-Content -Path ".github/msix-conversion-template.xml" -Raw
          
          Write-Host "`nReplacing placeholders with absolute paths:"
          Write-Host "- MSI Path: $absoluteMsiPath"
          Write-Host "- MSIX Output Path: $absoluteMsixPath"
          Write-Host "- App Version: ${{ env.VERSION }}.0"
          Write-Host "- Publisher Name: ${{ secrets.MSIX_PUBLISHER_DISPLAY_NAME }}"
          
          # Do replacements with absolute paths
          $templateContent = $templateContent.Replace("[MSIPath]", $absoluteMsiPath)
          $templateContent = $templateContent.Replace("[MSIXOutputPath]", $absoluteMsixPath)
          $templateContent = $templateContent.Replace("[AppVersion]", "${{ env.VERSION }}.0")
          $templateContent = $templateContent.Replace("[PublisherName]", "${{ secrets.MSIX_PUBLISHER_DISPLAY_NAME }}")
          
          Write-Host "`nFinal template content after replacements (with line numbers):"
          Write-Host "======================================"
          $lineNumber = 1
          $templateContent -split "`n" | ForEach-Object {
              Write-Host ("{0,4}: {1}" -f $lineNumber, $_)
              $lineNumber++
          }
          Write-Host "======================================"
          
          Write-Host "`nWriting template to msix-conversion-config.xml"
          $templateContent | Set-Content -Path "msix-conversion-config.xml" -NoNewline
          
          Write-Host "`nVerifying written file:"
          Write-Host "- File exists: $(Test-Path 'msix-conversion-config.xml')"
          Write-Host "- File size: $((Get-Item 'msix-conversion-config.xml').Length) bytes"
          
          # Verify paths in the generated config
          Write-Host "`nVerifying paths in generated config:"
          Write-Host "- MSI file exists: $(Test-Path $absoluteMsiPath)"
          Write-Host "- MSI directory exists: $(Test-Path (Split-Path $absoluteMsiPath))"
          Write-Host "- MSIX directory exists: $(Test-Path (Split-Path $absoluteMsixPath))"
          
          # Print directory contents
          Write-Host "`nMSI directory contents:"
          Get-ChildItem (Split-Path $absoluteMsiPath) | Format-Table Name, Length, LastWriteTime
          
          Write-Host "`nMSIX directory contents:"
          Get-ChildItem (Split-Path $absoluteMsixPath) | Format-Table Name, Length, LastWriteTime
          
          # Validate XML
          Write-Host "`nValidating XML structure..."
          try {
              [xml]$xml = Get-Content 'msix-conversion-config.xml'
              Write-Host "XML validation successful"
              
              # Print important XML nodes
              Write-Host "`nImportant XML nodes:"
              Write-Host "SaveLocation PackagePath: $($xml.MsixPackagingToolTemplate.SaveLocation.PackagePath)"
              Write-Host "Installer Path: $($xml.MsixPackagingToolTemplate.Installer.Path)"
              Write-Host "Installer InstallLocation: $($xml.MsixPackagingToolTemplate.Installer.InstallLocation)"
          } catch {
              Write-Host "XML validation failed: $_"
              throw
          }

      - name: Convert MSI to MSIX
        shell: pwsh
        run: |
          # Additional environment information
          Write-Host "`nSystem Information:"
          Write-Host "=================="
          Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
          Write-Host "OS Version: $([System.Environment]::OSVersion.Version)"
          Write-Host "Current User: $([System.Security.Principal.WindowsIdentity]::GetCurrent().Name)"
          Write-Host "Current Directory: $pwd"
          
          # Verify paths and environment before conversion
          Write-Host "`nEnvironment Check:"
          Write-Host "=================="
          $workspaceRoot = $pwd.Path
          $absoluteMsiPath = Join-Path $workspaceRoot $env:RELEASE_PATH_MSI
          $absoluteMsixPath = Join-Path $workspaceRoot $env:RELEASE_PATH_MSIX
          
          Write-Host "Absolute MSI Path: $absoluteMsiPath"
          Write-Host "MSI exists: $(Test-Path $absoluteMsiPath)"
          if (Test-Path $absoluteMsiPath) {
              Write-Host "MSI file details:"
              Get-Item $absoluteMsiPath | Select-Object FullName, Length, LastWriteTime, Attributes | Format-List
          }
          
          Write-Host "`nTemplate Check:"
          Write-Host "=================="
          Write-Host "Template exists: $(Test-Path 'msix-conversion-config.xml')"
          if (Test-Path 'msix-conversion-config.xml') {
              Write-Host "Template file details:"
              Get-Item 'msix-conversion-config.xml' | Select-Object FullName, Length, LastWriteTime, Attributes | Format-List
              Write-Host "`nTemplate content:"
              Get-Content 'msix-conversion-config.xml'
          }
          
          Write-Host "`nMSIX Output Check:"
          Write-Host "=================="
          $msixDir = Split-Path $absoluteMsixPath -Parent
          Write-Host "MSIX output directory: $msixDir"
          Write-Host "Directory exists: $(Test-Path $msixDir)"
          if (Test-Path $msixDir) {
              Write-Host "Directory contents:"
              Get-ChildItem $msixDir | Format-Table FullName, Length, LastWriteTime
          }
          
          Write-Host "`nStarting MSIX conversion..."
          MsixPackagingTool.exe create-package --template "msix-conversion-config.xml" -v

      - name: Upload asset msi
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.RELEASE_PATH_MSI }}
          name: ${{ env.NAME_MSI }}

      - name: Upload asset exe
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.RELEASE_PATH_EXE }}
          name: ${{ env.NAME_EXE }}
          
      - name: Upload asset msix
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.RELEASE_PATH_MSIX }}
          name: ${{ env.NAME_MSIX }}

      - name: Upload reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            **/build/compose/logs/*